def node_module(name, version, module_name=None,  resolved_by:str='', out=None, hashes=None, test_only=False, patches=None,
                visibility=None, deps=[], _tag=''):
    """Install a third-party library from the Yarn registry into a local mirror that yarn_script can use.
    The typical workflow for this is to use Yarn to set up your package.json and yarn.lock, then feed it through
    //js/yarn_deps to generate the appropriate BUILD rules. The yarn files may be checked in and used to facilitate
    watchers and other niceties from the yarn ecosystem.
    See //js/yarn_deps/generate_third_party.sh for an example usage.
    Args:
      name (str): Name of the rule.
      version (str): Version of the package to install.
      module_name (str): The name of the node package. Defaults to name.
      resolved_by (str): The URL that this dependency is resolved by. Optional.
      out (str): Output name for this package. Defaults to name.
      hashes (list): List of hashes that outputs must match.
      test_only (bool): If True, can only be depended on by test rules.
      patches (list): List of patch files to apply to the output library.
      visibility (list): Visibility declaration for this rule.
      deps (list): Any other dependencies of the rule.
    """
    module_name = module_name or name
    url = resolved_by if resolved_by else 'https://registry.yarnpkg.com/%s/-/%s-%s.tgz' % (module_name, module_name, version)
    cmd = 'echo "Fetching %s..." && mkdir target && curl -fsSL %s | tar -xz --no-same-owner --no-same-permissions -C target && mv target/* $OUT' % (url, url)
    if patches:
        cmd += ' && for SRC in $SRCS; do patch -p0 -l -i $SRC; done'

    download = remote_file(
        name = f'_{name}#download',
        url = url,
        out = out if out else name,
        hashes = hashes,
        test_only = test_only,
        visibility = visibility,
        extract = True,
    )

    return _node_module_bundle(
        download = download,
        name = name,
        exported_deps = deps,
        visibility = visibility,
        module_name=module_name,
        version=version,
    )

def _node_module_bundle(name:str, module_name:str, version:str, download:str, exported_deps:list, visibility:list):
    out_location = package_name() + f"/{name}.js"
    return build_rule(
        name = name,
        outs = [name + ".js"],
        srcs = [download],
        exported_deps = exported_deps,
        tools = ["//tools/esbuild"],
        visibility = visibility,
        labels = ['node_module:%s:%s' % (module_name, out_location), "module_version:%s@%s" % (module_name, version)],
        pre_build = _compile_comand(),
    )



def js_library(name:str, module_name:str='', srcs:list=[], deps:list=[], visibility:list=[], entry_point:str="index.js"):
    module_name = module_name or package_name() + f"/{name}"
    out_location = package_name() + f"/{name}.js"

    return build_rule(
        name = name,
        outs = [name + ".js"],
        srcs = srcs,
        exported_deps = deps,
        tools = ["//tools/esbuild"],
        visibility = visibility,
        labels = ['node_module:%s:%s' % (module_name, out_location)],
        pre_build = _compile_comand(entry_point),
    )

def js_binary(name:str, entry_point:str="index.js", srcs:list=[], deps:list=[], visibility:list=[]):
    return build_rule(
        name = name,
        outs = [name + ".js"],
        srcs = srcs,
        exported_deps = deps,
        binary = True,
        tools = ["//tools/esbuild"],
        visibility = visibility,
        pre_build = _link_command(entry_point),
    )

def _compile_comand(entry_point:str=None):
    def pre_build(name):
        entry_point_flag = f"--entry_point=$PKG_DIR/{entry_point}" if entry_point else "--package_json=$SRC/package/package.json"
        externl_flags = _external_flags(name)
        cmd = f"$TOOLS compile {entry_point_flag} {externl_flags} --out=$OUT"
        set_command(name, cmd)
    return pre_build

def _link_command(entry_point:str):
    def pre_build(name):
        # TODO(jpoole): probably want to add the shebang conditionally but this is useful for now
        module_flags = _module_map_flags(name)
        cmd = f"$TOOLS link --entry_point $PKG_DIR/{entry_point} {module_flags} --out=$OUT.tmp && echo \"#!/usr/bin/env node\" > $OUT && cat $OUT.tmp >> $OUT"
        set_command(name, cmd)
    return pre_build

def _external_flags(name):
    modules = [module.split(":")[0] for module in get_labels(name, 'node_module:')]
    return " ".join([f"--external={module}" for module in modules])

def _module_map_flags(name):
    modules = [module.split(":") for module in get_labels(name, 'node_module:')]
    return " ".join([f"--module {module}:{path}" for module, path in modules])

